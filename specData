#!/usr/bin/python
'''
General plan:
    use scikits.audiolab to get data bit by bit
    fft the samples --> get the spectrum
'''
import numpy as np
from functools import reduce
from scikits.audiolab import Sndfile
import sys

#### Some extra-info
#
# human hearing ~20hz - ~20khz
# piano is from ~27hz to ~4200hz
#
####

####### VARIABLES/FUNCTIONS OF DOOM

#for future, pass the uri to the script
audio_file = sys.argv[1]

#total slices or w/e
total_fouriers = 4000

#the window size (i.e., number of samples) for each fft
fourier_window = np.float(1024)

def bounds(sample_rate):
    # define ranges of frequencies (hz) to blend
    # i could do this automatically, but w/e
    # basically, blend logarithmically

    ny = sample_rate / 2
    
    bounds = []
    #12 octaves
    for i in range(12):
        b = [ny / np.power(2,12-i), ny / np.power(2,11-i)]

        #split/combine some octaves
        # octave 4 in 2
        # octave 5 - 7 in 3
        if i == 4:
            mid = (b[0] + b[1])/2
            bounds.extend([[b[0], mid], [mid, b[1]]])
            continue
        if i in (5,6,7):
            d = (b[1] - b[0]) / 3
            l = b[0] + d
            u = b[0] + 2 * d
            bounds.extend([[b[0], l], [l, u], [u, b[1]]])
            continue
        
        bounds.append(b)

        #start at zero
        bounds[0][0] = 0
                
    return bounds

def freq_to_bound(sample_size, sample_rate):
    #now I need to determine for the indices where they belong in the bounds
    # really stupid way to do this, but wtf, I suck at coding
    indices=[]
    for j,bound in enumerate(bounds(sample_rate)):
        inds = []
        for i,freq in enumerate(freqs(sample_size, sample_rate)):
            if bound[0] <= freq <= bound[1]:
                #print freq, "w/i", bound[0], "and", bound[1]
                #print "--> therefore,", i, "in", j
                inds.append(i)
            if freq > bound[1]:
                break
        indices.append(inds)

    # now we have an array mapping fft index to
    # blended band index
    
    return indices

def fft(samples):
    #abs of fast fourier transform
    return np.abs(np.fft.rfft(samples)) 

def bandwidth(sample_size, sample_rate):
    #return bandwidth
    return np.multiply(np.true_divide(2, sample_size), np.true_divide(sample_rate, 2))

def freqs(sample_size, sample_rate):
    #frequency for each index
    f = np.true_divide(sample_rate, sample_size)
    p=[k * f for k in range(int(np.floor_divide(sample_size,2) + 1))]
    return p

####### END VARIABLES/FUNCTIONS OF DOOM


########### GET THE AUDIO DATA

f = Sndfile(audio_file, "r")

# some germane
# f properties..
    #   samplerate = samplerate of the file
    #   nframes = total number of frames in the file
    #   channels = number of channels in the file
#   methods...
    #   read_frames(x) = read x number of frames, moves index
    #   seek(x) = move to frame number x

#length of file (in secs) very rough
time_length = f.nframes / f.samplerate

# fouriers per second of sample
fouriers_per_second = total_fouriers / time_length

#frame step between each fft
fourier_step = np.floor_divide(f.nframes, total_fouriers)

#print fouriers_per_second
#sys.exit(0)

# print the info, if one wants
print "samplerate:",f.samplerate
print "total frames:",f.nframes
print "window_size:",fourier_window
print "# of ffts:", total_fouriers
print "step:",fourier_step
print "length:", time_length, "seconds"

# go through parts of file, chunk by chunk, with seeks

#frame starts for each fourier

i=0
spectrum_data = []
for window in range(total_fouriers):
    #print "fourier #:",window, "i:",i
    f.seek(i)
    if f.channels == 1:
        chunk = f.read_frames(fourier_window)

    else:
        #average the channels
        chunk = []
        for frame in f.read_frames(fourier_window):
            avg = np.true_divide(np.sum(frame), fourier_window)
            chunk.append(avg)
    
    spectrum_data.append(fft(chunk))
    i+=fourier_step

##### Have fft'd audio data in array, yay!!!!

##### Now we need to blend into bands
# average for each fft
a = []
spectrum_data = np.array(spectrum_data)
for s in freq_to_bound(fourier_window, f.samplerate):
    print s
    if s:
        a.append( 
                    #average every fft between bounds
                    np.mean(
                        spectrum_data[...,s[0]:s[-1]+1], 
                        axis=1
                        )
                    )
    else:
        #TODO 
        #   i can (should?) append zeros since no frequency center
        #   is in the band, however that doesn't mean
        #   there isn't some spectral density...
        #   i'll think about it if i ever want to change this
       #a.append(
       #            #add zeroes since no data in that band 
       #            np.zeros(( total_fouriers,))
       #        )
        continue


# join the averages
a = np.dstack(a)[0]

##### this part was hard to explain w/o some visuals 

##### we are going to write to a file
#import json
from StringIO import StringIO
fp = StringIO()

# write part of desired format, 
# probably can do this through json.dump
# but fucked if i know how
fp.write("data[0] = {title: 'blar', timecode: [")

# calculate very roughly millisecond difference b/w each sample
time_step = np.reciprocal(np.float(fouriers_per_second)) * 1000
#print time_step, "ms b/w each sampling"

# time window for each sample set (in ms)
window_time = (time_length / fourier_window) * 1000
#print window_time, "ms for each sample set"

#find max value in fft, needed for scaling
high=np.amax(a)

for k,v in enumerate(a):
    # calculte time (in ms) for each sample
    time = int(np.floor((k * time_step) + (.5 * window_time)))
    #print time, "milliseconds"

    #scale values to between 0-255
    scale = 255 / high # (high - low) but low = 0, more or less
    tmp = np.multiply(v, scale)
    tmp = np.round(tmp)
    tmp = np.asarray(tmp,dtype=int)

    # write to file object
    fp.write('{t:' + str(time) + ',p:' + str(tmp.tolist()) + '}')
    if k == len(a) - 1:
        continue
    else:
        fp.write(',')

fp.write("]};")
contents = fp.getvalue()
fp.close()

# write to file
with open("/home/cz/d.txt", "w") as p:
    p.write(contents)

##### Done writing to file
