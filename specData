#!/usr/bin/python
'''
General plan:
    use scikits.audiolab to get data bit by bit
    fft the samples --> get the spectrum
'''
import numpy as np
from collections import deque
from functools import reduce
from scikits.audiolab import Sndfile
from pprint import pprint
import sys

def fft(samples):
    f = np.fft.rfft(samples)
    spectrum = np.abs(f)
    return spectrum

#GET THE AUDIO DATA
#
#for future, pass this data to the script
audio_file = "/home/cz/test.ogg"

f = Sndfile(audio_file, "r")

# some germane
# f properties..
    #   samplerate = sample rate of the file
    #   nframes = total number of frames in the file
    #   channels = number of channels in the file
#   methods...
    #   read_frames(number) = read <number> of frames, moves index
    #   seek = go to specific frame

#fourier shit
fouriers_per_second = np.float(24)
#fourier_width = np.float(.3) #in seconds

#the window size for each fft
#fourier_window = fourier_width * f.samplerate
fourier_window = np.float(256)

#frame step between each fft
fourier_step = np.multiply(np.reciprocal(fouriers_per_second), f.samplerate)

print "samplerate:",f.samplerate
print "step:",fourier_step
print "#:", np.true_divide(f.nframes,fourier_step)
print "window_size:",fourier_window
print "n frames:",f.nframes
#sys.exit(0)

one_channel = 1 if f.channels == 1 else 0

#fill buffer and fft the first window
#buffer = deque(np.ravel(f.read_frames(fourier_window)))
buffer = np.ravel(f.read_frames(fourier_window))
if one_channel:
    spectrum = fft(buffer)
else:
    tmp = []
    for frame in buffer:
        avg = np.true_divide(np.sum(frame), fourier_window)
        tmp.append(avg)

    spectrum = fft(tmp)

print "len:",len(spectrum)
#go through the rest
i,j=0,0
for window in range(1,int(np.floor_divide(f.nframes, fourier_step))):
    f.seek(i)
    if one_channel:
        chunk = f.read_frames(fourier_window)

    else:
        #average the channels
        chunk = []
        #for frame in f.read_frames(fourier_step):
        for frame in f.read_frames(fourier_window):
            avg = np.true_divide(np.sum(tmp), fourier_window)
            chunk.append(avg)

    #add the new frames and remove the old
#    buffer.extend(chunk)
#    for elem in chunk:
#        buffer.popleft()
#

    
    #fft the samples
    #spectrum = fft(buffer)
    spectrum = fft(chunk)
    #print "len:",len(spectrum)

    #print j,i
    j+=1
    i+=fourier_step
