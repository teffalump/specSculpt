#!/usr/bin/python
'''
General plan:
    use scikits.audiolab to get data bit by bit
    fft the samples --> get the spectrum
'''
import numpy as np
from functools import reduce
from scikits.audiolab import Sndfile
from pprint import pprint
import sys

# number of bands
bands = 50 


def fft(samples):
    #abs of fast fourier transform
    f = np.fft.rfft(samples)
    spectrum = np.abs(f)
    return spectrum

def bandwidth(sample_size, sample_rate):
    #return bandwidth
    return np.multiply(np.true_divide(2, sample_size), np.true_divide(sample_rate, 2))

def freq_to_i(frequency, sample_size, sample_rate):
    #return index given frequency
    freq = np.float(frequency)
    ss = np.float(sample_size)
    sr = np.float(sample_rate)
    if freq < np.true_divide(bandwidth(ss, sr), 2):
        return 0
    
    if freq > np.true_divide(sr, 2) - np.true_divide(bandwidth(ss, sr), 2):
        return np.floor_divide(ss, 2)

    f = np.true_divide(freq, sr)
    i = np.round(np.multiply(ss, f))
    return int(i)

def log_averages(spectrum, sample_size, sample_rate, bands = 12):
    #given spectrum, log average the frequency amplitudes into
    #<bands> number of freqeuncy bands
    sr = np.float(sample_rate)
    averages = []
    for i in range(bands):
        avg = np.float(0)
        if i == 0:
            low_freq = 0
        else:
            low_freq = np.true_divide(np.true_divide(sr,2), np.power(2, bands - i))

        high_freq = np.true_divide(np.true_divide(sr,2), np.power(2, bands - 1 - i))
        

        low_b = freq_to_i(low_freq, sample_size, sample_rate)
        hi_b = freq_to_i(high_freq, sample_size, sample_rate)

        #print i, (low_b, hi_b), (low_freq,high_freq)

        for j in range(low_b, int(hi_b) +1):
            avg += spectrum[j]
        avg = np.true_divide(avg, hi_b - low_b + 1)
        averages.append(avg)

    return np.array(averages)

#print bandwidth(1024, 44100)
#print freq_to_i(21, 1024, 44100)
#sys.exit(0)
########### GET THE AUDIO DATA
#for future, pass this data to the script
audio_file = "/home/cz/test.ogg"

f = Sndfile(audio_file, "r")

# some germane
# f properties..
    #   samplerate = samplerate of the file
    #   nframes = total number of frames in the file
    #   channels = number of channels in the file
#   methods...
    #   read_frames(x) = read x number of frames, moves index
    #   seek(x) = move to frame number x

#fourier shit
fouriers_per_second = np.float(4)

#the window size for each fft
fourier_window = np.float(512)

#frame step between each fft
fourier_step = np.multiply(np.reciprocal(fouriers_per_second), f.samplerate)

#print "samplerate:",f.samplerate
#print "step:",fourier_step
#print "#:", np.true_divide(f.nframes,fourier_step)
#print "window_size:",fourier_window
#print "n frames:",f.nframes

# just simplify it, lol
one_channel = 1 if f.channels == 1 else 0

# go through parts of file, chunk by chunk, with seeks
i=0
spectrum_data = []
for window in range(int(np.floor_divide(f.nframes, fourier_step))):
    f.seek(i)
    if one_channel:
        chunk = f.read_frames(fourier_window)
    else:

        #average the channels
        chunk = []
        for frame in f.read_frames(fourier_window):
            avg = np.true_divide(np.sum(frame), fourier_window)
            chunk.append(avg)
    
    spectrum_data.append(fft(chunk))
    i+=fourier_step
# Have spectrum data in array, yay!!!!

# average the shit into w/e number of bands
a = [log_averages(s, fourier_window, f.samplerate, bands)) for s in spectrum_data]


# we are going to write to a file
import json
from StringIO import StringIO
fp = StringIO()

# write part of desired format, 
# probably can do this through json.dump
# but fucked if i know how
fp.write("data[0] = {title: 'blar', timecode: [")

# calculate very roughly millisecond difference b/w each sample
time_step = round(((f.nframes / f.samplerate) / fourier_step) * 1000)

for k,v in enumerate(a):
    # calculte time (in ms) for each sample
    time = k * time_step

    #scale values to between 0-255
    t = v.min()
    scale = float(255) / (v.max() - t)
    tmp = np.subtract(v,t)
    tmp = np.multiply(tmp, scale)
    tmp = np.round(tmp)
    tmp = np.asarray(tmp,dtype=int)

    # write to file object
    json.dump({'p':tmp.tolist(),'t':time},fp)

fp.write("]};")
contents = fp.getvalue()
fp.close()

# write to file
with open("/home/cz/d.txt", "w") as p:
    p.write(contents)
